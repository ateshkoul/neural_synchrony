function IBSdatacleaningS1 = IBS_importfile_data_cleaning_excel(workbookFile, sheetName, dataLines)
%IMPORTFILE Import data from a spreadsheet
%  IBSDATACLEANINGS1 = IMPORTFILE(FILE) reads data from the first
%  worksheet in the Microsoft Excel spreadsheet file named FILE.
%  Returns the data as a cell array.
%
%  IBSDATACLEANINGS1 = IMPORTFILE(FILE, SHEET) reads from the specified
%  worksheet.
%
%  IBSDATACLEANINGS1 = IMPORTFILE(FILE, SHEET, DATALINES) reads from the
%  specified worksheet for the specified row interval(s). Specify
%  DATALINES as a positive scalar integer or a N-by-2 array of positive
%  scalar integers for dis-contiguous row intervals.
%
%  Example:
%  IBSdatacleaningS1 = importfile("C:\Users\Atesh\OneDrive - Fondazione Istituto Italiano Tecnologia\Research projects 2020\Inter-brain synchrony\Analysis\EEG\IBS_data_cleaning.xlsx", "Sheet2", [2, 24]);
%
%  See also READTABLE.
%
% Auto-generated by MATLAB on 16-Oct-2020 11:28:08

%% Input handling

% If no sheet is specified, read first sheet
if nargin == 1 || isempty(sheetName)
    sheetName = 1;
end

% If row start and end points are not specified, define defaults
if nargin <= 2
    dataLines = [2, 24];
end

%% Setup the Import Options and import the data
opts = spreadsheetImportOptions("NumVariables", 13);

% Specify sheet and range
opts.Sheet = sheetName;
opts.DataRange = "A" + dataLines(1, 1) + ":M" + dataLines(1, 2);

% Specify column names and types
opts.VariableNames = ["Dyd_no", "S0_bad_chan_baseline_1", "S0_bad_chan_blocks", "S0_bad_chan_baseline_2", "S0_ICA_comp_baseline_1", "S0_ICA_comp_blocks", "S0_ICA_comp_baseline_2", "S1_bad_chan_baseline_1", "S1_bad_chan_blocks", "S1_bad_chan_baseline_2", "S1_ICA_comp_baseline_1", "S1_ICA_comp_blocks", "S1_ICA_comp_baseline_2"];
opts.VariableTypes = ["char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char"];

% Specify variable properties
opts = setvaropts(opts, ["Dyd_no", "S0_bad_chan_baseline_1", "S0_bad_chan_blocks", "S0_bad_chan_baseline_2", "S0_ICA_comp_baseline_1", "S0_ICA_comp_blocks", "S0_ICA_comp_baseline_2", "S1_bad_chan_baseline_1", "S1_bad_chan_blocks", "S1_bad_chan_baseline_2", "S1_ICA_comp_baseline_1", "S1_ICA_comp_blocks", "S1_ICA_comp_baseline_2"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["Dyd_no", "S0_bad_chan_baseline_1", "S0_bad_chan_blocks", "S0_bad_chan_baseline_2", "S0_ICA_comp_baseline_1", "S0_ICA_comp_blocks", "S0_ICA_comp_baseline_2", "S1_bad_chan_baseline_1", "S1_bad_chan_blocks", "S1_bad_chan_baseline_2", "S1_ICA_comp_baseline_1", "S1_ICA_comp_blocks", "S1_ICA_comp_baseline_2"], "EmptyFieldRule", "auto");

% Import the data
IBSdatacleaningS1 = readtable(workbookFile, opts, "UseExcel", false);

for idx = 2:size(dataLines, 1)
    opts.DataRange = "A" + dataLines(idx, 1) + ":M" + dataLines(idx, 2);
    tb = readtable(workbookFile, opts, "UseExcel", false);
    IBSdatacleaningS1 = [IBSdatacleaningS1; tb]; %#ok<AGROW>
end

%% Convert to output type
IBSdatacleaningS1 = table2cell(IBSdatacleaningS1);
numIdx = cellfun(@(x) ~isnan(str2double(x)), IBSdatacleaningS1);
IBSdatacleaningS1(numIdx) = cellfun(@(x) {str2double(x)}, IBSdatacleaningS1(numIdx));
end